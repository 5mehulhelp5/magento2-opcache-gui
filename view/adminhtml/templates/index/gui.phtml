<?php
/**
 * OPcache GUI performance testing template
 *
 * @category  Genaker
 * @package   Genaker_Opcache
 * @author    Yehor Shytikov
 * @copyright Copyright (c) 2020-2025 Genaker
 * @license   MIT
 */

declare(strict_types=1);

/**
 * OPcache GUI performance testing template
 * Renders PHP performance metrics and integrates with amnuts/opcache-gui
 */
?>
<style>
    .performance-test-result {
        padding-bottom: 5px;
        font-size: 20px;
        color: #adff2f;
        background-color: #000;
        padding: 10px;
        margin-bottom: 5px;
        border-radius: 3px;
    }
    .performance-test-error {
        color: #ff0000;
        font-size: 20px;
        font-weight: 600;
        padding: 10px;
        margin-bottom: 5px;
        background-color: #fff8f8;
        border-left: 4px solid #ff0000;
    }
    .performance-heading {
        margin: 20px 0 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #ccc;
    }
</style>

<h2 class="performance-heading">PHP Performance Test</h2>

<?php
/**
 * Executes a CPU-intensive operation and measures execution time
 * 
 * @return float Execution time in seconds
 */
function testPhpPerformance(): float
{
    // Capture start time with high precision
    $start = microtime(true);
    
    // CPU-intensive operation - simple loop with multiplication
    $b = 0;
    for ($a = 0; $a < 10000000; $a++) {
        $b = $a * $a;
    }
    
    // Prevent optimization completely removing the loop
    if ($b === PHP_INT_MAX) {
        echo "Unexpected value";
    }
    
    // Calculate execution time
    return microtime(true) - $start;
}

// Run performance test multiple times for better accuracy
$results = [];
for ($i = 0; $i < 3; $i++) {
    $results[] = testPhpPerformance();
}

// Display results of each test
foreach ($results as $index => $time) {
    echo sprintf(
        "<div class='performance-test-result'>Test #%d: Execution time = %.5f seconds</div>",
        $index + 1,
        $time
    );
}

// Calculate and display average performance
$avgTime = array_sum($results) / count($results);
echo sprintf(
    "<div class='performance-test-result'><strong>Average execution time: %.5f seconds</strong></div>",
    $avgTime
);

echo '<h2 class="performance-heading">PHP OPcache Status Check</h2>';

/**
 * Check OPcache status and configuration
 * Provides warnings about suboptimal settings
 */
if (extension_loaded('Zend OPcache')) {
    // Get OPcache status
    $opcacheStatus = opcache_get_status(false);
    $opcacheConfig = opcache_get_configuration();
    
    // Calculate OPcache memory usage
    $memoryUsed = $opcacheStatus['memory_usage']['used_memory'] ?? 0;
    $memoryFree = $opcacheStatus['memory_usage']['free_memory'] ?? 0;
    $memoryWasted = $opcacheStatus['memory_usage']['wasted_memory'] ?? 0;
    $memoryTotal = $memoryUsed + $memoryFree + $memoryWasted;
    
    // Get timestamp validation setting
    $validateTimestamps = $opcacheConfig['directives']['opcache.validate_timestamps'] ?? false;
    
    // Check for insufficient memory
    if ($memoryFree < 1000000) {
        echo "<div class='performance-test-error'>
            <strong>Warning:</strong> Increase OPcache memory allocation. Current free memory: " 
            . number_format($memoryFree) . " bytes
        </div>";
    }
    
    // Check for timestamp validation in production
    if ($validateTimestamps === true) {
        echo "<div class='performance-test-error'>
            <strong>Warning:</strong> Timestamp validation is enabled. For optimal performance in production, 
            disable opcache.validate_timestamps in php.ini
        </div>";
    }
    
    // Display OPcache memory stats
    echo "<div class='performance-test-result'>
        OPcache memory usage: " . number_format($memoryUsed) . " bytes used, 
        " . number_format($memoryFree) . " bytes free
    </div>";
    
    // Display hit rate if available
    if (isset($opcacheStatus['opcache_statistics']['hit_rate'])) {
        $hitRate = $opcacheStatus['opcache_statistics']['hit_rate'];
        echo "<div class='performance-test-result'>
            OPcache hit rate: " . number_format($hitRate, 2) . "%
        </div>";
    }
} else {
    echo '<div class="performance-test-error">
        <strong>Error:</strong> Zend OPcache extension is not loaded. OPcache is not working.
    </div>';
}

// Check for Xdebug which impacts performance
if (extension_loaded('xdebug')) {
    echo "<div class='performance-test-error'>
        <strong>Warning:</strong> Xdebug is enabled. This causes significant performance overhead. 
        Disable Xdebug on production servers.
    </div>";
}

// Define OPcache GUI options
$opcacheGuiOptions = [
    'allow_filelist'   => true,
    'allow_invalidate' => true,
    'allow_reset'      => true,
    'allow_realtime'   => true,
    'refresh_time'     => 5,
    'size_precision'   => 2,
    'size_space'       => false,
    'charts'           => true,
    'debounce_rate'    => 250,
    'per_page'         => 200,
    'cookie_name'      => 'opcachegui',
    'cookie_ttl'       => 365,
    'highlight'        => [
        'memory' => true,
        'hits'   => true,
        'keys'   => true
    ]
];

try {
    // Initialize the OPcache GUI service
    $opcacheGui = (new \Amnuts\Opcache\Service($opcacheGuiOptions))->handle();
    
    // Include the OPcache GUI interface
    require_once __DIR__ . '/../../../../../vendor/amnuts/opcache-gui/index.php';
} catch (\Exception $e) {
    echo "<div class='performance-test-error'>
        <strong>Error loading OPcache GUI:</strong> " . $e->getMessage() . "
    </div>";
}

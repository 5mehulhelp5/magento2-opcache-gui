<?php
/**
 * OPcache GUI performance testing template
 *
 * @category  Genaker
 * @package   Genaker_Opcache
 * @author    Yehor Shytikov, Ilan Parmentier
 * @copyright Copyright Â© 2020-2025 Genaker, Amadeco. All rights reserved.
 * @license   MIT License
 */
declare(strict_types=1);

/**
 * @var \Magento\Framework\Escaper $escaper
 * @var \Magento\Framework\View\Helper\SecureHtmlRenderer $secureRenderer
 * @var \Genaker\Opcache\Block\Adminhtml\Index\Gui $block
 */
?>
<style>
    .performance-card {
        margin-bottom: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background-color: #fff;
        overflow: hidden;
    }
    .performance-card-header {
        background-color: #f8f8f8;
        padding: 15px;
        border-bottom: 1px solid #e8e8e8;
    }
    .performance-card-header h2 {
        margin: 0;
        font-size: 18px;
        color: #333;
    }
    .performance-card-body {
        padding: 15px;
    }
    .performance-result {
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: #000;
        color: #adff2f;
        font-family: monospace;
        font-size: 16px;
    }
    .performance-warning {
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: #fff8f8;
        border-left: 4px solid #ff9800;
        color: #333;
    }
    .performance-error {
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: #fff8f8;
        border-left: 4px solid #ff0000;
        color: #333;
    }
    .opcache-dashboard {
        margin-top: 30px;
    }
</style>

<div class="performance-card">
    <div class="performance-card-header">
        <h2><?= $escaper->escapeHtml(__('PHP Performance Test')) ?></h2>
    </div>
    <div class="performance-card-body">
        <?php
        /**
         * Executes a CPU-intensive operation and measures execution time
         * 
         * @return float Execution time in seconds
         */
        function testPhpPerformance(): float
        {
            // Disable garbage collection during the test for consistent results
            $gcStatus = gc_enabled();
            gc_disable();
            
            try {
                // Capture start time with high precision
                $start = microtime(true);
                
                // CPU-intensive operation with various operations to prevent optimization
                $b = 0;
                $c = 1;
                for ($a = 0; $a < 10000000; $a++) {
                    $b = $a * $a;
                    $c = ($a % 2 === 0) ? $c + 1 : $c * 2;
                    if ($c > 1000000) {
                        $c = 1;
                    }
                }
                
                // Prevent optimization completely removing the loop
                if ($b === PHP_INT_MAX || $c === PHP_INT_MAX) {
                    echo "Unexpected value";
                }
                
                // Calculate execution time
                return microtime(true) - $start;
            } finally {
                // Restore garbage collection status
                if ($gcStatus) {
                    gc_enable();
                }
            }
        }

        // Run performance test multiple times for better accuracy
        $results = [];
        for ($i = 0; $i < 3; $i++) {
            $results[] = testPhpPerformance();
        }

        // Display results of each test
        foreach ($results as $index => $time) {
            echo sprintf(
                '<div class="performance-result">Test #%d: Execution time = %.5f seconds</div>',
                $index + 1,
                $time
            );
        }

        // Calculate and display average performance
        $avgTime = array_sum($results) / count($results);
        echo sprintf(
            '<div class="performance-result"><strong>Average execution time: %.5f seconds</strong></div>',
            $avgTime
        );
        
        // PHP version information
        echo sprintf(
            '<div class="performance-result">PHP Version: %s</div>',
            $escaper->escapeHtml(PHP_VERSION)
        );
        ?>
    </div>
</div>

<div class="performance-card">
    <div class="performance-card-header">
        <h2><?= $escaper->escapeHtml(__('PHP OPcache Status Check')) ?></h2>
    </div>
    <div class="performance-card-body">
        <?php
        /**
         * Check OPcache status and configuration
         * Provides warnings about suboptimal settings
         */
        if (is_array(opcache_get_status())) {
            try {
                // Get OPcache status and configuration
                $opcacheStatus = opcache_get_status(false);
                $opcacheConfig = opcache_get_configuration();
                
                // Check OPcache status is valid
                if (!is_array($opcacheStatus) || !is_array($opcacheConfig)) {
                    throw new \RuntimeException('Invalid OPcache status or configuration data');
                }
                
                // Calculate OPcache memory usage
                $memoryUsed = $opcacheStatus['memory_usage']['used_memory'] ?? 0;
                $memoryFree = $opcacheStatus['memory_usage']['free_memory'] ?? 0;
                $memoryWasted = $opcacheStatus['memory_usage']['wasted_memory'] ?? 0;
                $memoryTotal = $memoryUsed + $memoryFree + $memoryWasted;
                
                // Get key settings
                $validateTimestamps = $opcacheConfig['directives']['opcache.validate_timestamps'] ?? null;
                $revalidateFreq = $opcacheConfig['directives']['opcache.revalidate_freq'] ?? null;
                $maxAcceleratedFiles = $opcacheConfig['directives']['opcache.max_accelerated_files'] ?? null;
                $memoryConsumption = $opcacheConfig['directives']['opcache.memory_consumption'] ?? null;
                
                // Memory utilization percentage
                $memoryUtilizationPct = ($memoryTotal > 0) ? ($memoryUsed / $memoryTotal) * 100 : 0;
                
                // Check for insufficient memory (less than 32MB free)
                if ($memoryFree < 32 * 1024 * 1024) {
                    echo '<div class="performance-warning">
                        <strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> '
                        . $escaper->escapeHtml(__('Low OPcache free memory. Consider increasing opcache.memory_consumption.'))
                        . ' ' . $escaper->escapeHtml(__('Current free memory:')) . ' '
                        . $escaper->escapeHtml(number_format($memoryFree / 1024 / 1024, 2)) . ' MB
                    </div>';
                }
                
                // Check for timestamp validation in production
                if ($validateTimestamps === true) {
                    echo '<div class="performance-warning">
                        <strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> '
                        . $escaper->escapeHtml(__('Timestamp validation is enabled. For optimal performance in production, 
                        disable opcache.validate_timestamps in php.ini'))
                    . '</div>';
                }
                
                // Check for low max_accelerated_files
                if ($maxAcceleratedFiles !== null && $maxAcceleratedFiles < 50000) {
                    echo '<div class="performance-warning">
                        <strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> '
                        . $escaper->escapeHtml(__('Low max_accelerated_files setting. For Magento 2, at least 50,000 is recommended.'))
                        . ' ' . $escaper->escapeHtml(__('Current setting:')) . ' '
                        . $escaper->escapeHtml(number_format($maxAcceleratedFiles))
                    . '</div>';
                }
                
                // Check for low memory_consumption
                if ($memoryConsumption !== null && $memoryConsumption < 256) {
                    echo '<div class="performance-warning">
                        <strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> '
                        . $escaper->escapeHtml(__('Low memory_consumption setting. For Magento 2, at least 256MB is recommended.'))
                        . ' ' . $escaper->escapeHtml(__('Current setting:')) . ' '
                        . $escaper->escapeHtml($memoryConsumption) . ' MB
                    </div>';
                }
                
                // Display OPcache memory stats
                echo '<div class="performance-result">
                    ' . $escaper->escapeHtml(__('Memory Usage:')) . ' ' 
                    . $escaper->escapeHtml(number_format($memoryUsed / 1024 / 1024, 2)) . ' MB ' . $escaper->escapeHtml(__('used')) . ', '
                    . $escaper->escapeHtml(number_format($memoryFree / 1024 / 1024, 2)) . ' MB ' . $escaper->escapeHtml(__('free')) . ', '
                    . $escaper->escapeHtml(number_format($memoryWasted / 1024 / 1024, 2)) . ' MB ' . $escaper->escapeHtml(__('wasted')) . ' ('
                    . $escaper->escapeHtml(number_format($memoryUtilizationPct, 1)) . '% ' . $escaper->escapeHtml(__('utilization')) . ')
                </div>';
                
                // Display hit rate if available
                if (isset($opcacheStatus['opcache_statistics']['hit_rate'])) {
                    $hitRate = $opcacheStatus['opcache_statistics']['hit_rate'];
                    echo '<div class="performance-result">
                        ' . $escaper->escapeHtml(__('Hit Rate:')) . ' '
                        . $escaper->escapeHtml(number_format($hitRate, 2)) . '%
                    </div>';
                }
                
                // Display memory consumption setting
                if ($memoryConsumption !== null) {
                    echo '<div class="performance-result">
                        ' . $escaper->escapeHtml(__('Memory Allocation:')) . ' '
                        . $escaper->escapeHtml($memoryConsumption) . ' MB
                    </div>';
                }
                
                // Display max accelerated files
                if ($maxAcceleratedFiles !== null) {
                    echo '<div class="performance-result">
                        ' . $escaper->escapeHtml(__('Max Accelerated Files:')) . ' '
                        . $escaper->escapeHtml(number_format($maxAcceleratedFiles))
                    . '</div>';
                }
                
                // Get script cached count if available
                if (isset($opcacheStatus['opcache_statistics']['num_cached_scripts'])) {
                    $numCachedScripts = $opcacheStatus['opcache_statistics']['num_cached_scripts'];
                    echo '<div class="performance-result">
                        ' . $escaper->escapeHtml(__('Cached Scripts:')) . ' '
                        . $escaper->escapeHtml(number_format($numCachedScripts))
                    . '</div>';
                }
                
            } catch (\Exception $e) {
                echo '<div class="performance-error">
                    <strong>' . $escaper->escapeHtml(__('Error')) . ':</strong> '
                    . $escaper->escapeHtml($e->getMessage())
                . '</div>';
            }
        } else {
            echo '<div class="performance-error">
                <strong>' . $escaper->escapeHtml(__('Error')) . ':</strong> '
                . $escaper->escapeHtml(__('Zend OPcache extension is not loaded. OPcache is not working.'))
            . '</div>';
        }

        // Check for Xdebug which impacts performance
        if (extension_loaded('xdebug')) {
            echo '<div class="performance-warning">
                <strong>' . $escaper->escapeHtml(__('Warning')) . ':</strong> '
                . $escaper->escapeHtml(__('Xdebug is enabled. This causes significant performance overhead. 
                Disable Xdebug on production servers.'))
            . '</div>';
        }
        ?>
    </div>
</div>

<?php
try {
    if (!class_exists(\Amnuts\Opcache\Service::class)) {
        throw new \RuntimeException(
            __('Amnuts\Opcache\Service class is not available. Make sure the amnuts/opcache-gui package is installed.')
        );
    }
    
    // Initialize the OPcache GUI service
    $opcacheGui = (new \Amnuts\Opcache\Service())->handle();
    
    echo '<div class="opcache-dashboard">';
    
    // Include the OPcache GUI interface
    require_once BP . '/vendor/amnuts/opcache-gui/index.php';
    
    echo '</div>';
} catch (\Exception $e) {
    echo '<div class="performance-error">
        <strong>' . $escaper->escapeHtml(__('Error loading OPcache GUI:')) . '</strong> '
        . $escaper->escapeHtml($e->getMessage())
    . '</div>';
}
?>
